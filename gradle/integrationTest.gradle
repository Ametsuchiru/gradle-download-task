buildscript {
    dependencies {
        classpath 'org.mortbay.jetty:jetty-embedded:6.1.25'
    }
    
    repositories {
        mavenCentral()
    }
}

import org.apache.tools.ant.taskdefs.condition.Os
import org.mortbay.jetty.Handler
import org.mortbay.jetty.Server
import org.mortbay.jetty.handler.DefaultHandler
import org.mortbay.jetty.handler.HandlerList
import org.mortbay.jetty.handler.ResourceHandler
import org.mortbay.resource.Resource

task integrationTest << {
    def testStr = "This is a test"
    
    def versionsToTest = [ '1.0', '1.1', '1.2', '1.3', '1.4', '1.5',
        '1.6', '1.7', '1.8', '1.9', '1.10', '1.11', '1.12',
        '2.0', '2.1' ]
    
    //run server on any free port
    def server = new Server(0)
    
    //serve resources from temporary folder
    def resourceHandler = new ResourceHandler()
    resourceHandler.setBaseResource(Resource.newResource(
            temporaryDir.getAbsolutePath()))
    
    def handlers = new HandlerList()
    handlers.setHandlers([ resourceHandler, new DefaultHandler() ] as Handler[])
    server.setHandler(handlers)
    
    server.start()
    def serverPort = server.getConnectors()[0].getLocalPort()
    
    def testFile = null
    try {
        //write simple test file to temporary directory
        testFile = new File(temporaryDir, "test.txt")
        testFile.write(testStr)
        
        def testFileSrc = "http://localhost:" + serverPort + "/test.txt"
        
        //create Gradle test project
        def testGradle = { version ->
            println("Testing Gradle version ${version} ...")
            
            def testProjectDir = new File(temporaryDir, version)
            
            if (testProjectDir.exists()) {
                project.delete(testProjectDir)
            }
            
            testProjectDir.mkdirs()
            def testProjectBuildScript = new File(testProjectDir, "build.gradle")
            testProjectBuildScript.write("""
                buildscript {
                    dependencies {
                        classpath '${project.group}:${project.name}:${project.version}'
                    }
                    
                    repositories {
                        mavenLocal()
                    }
                }
                
                task wrapper(type: Wrapper) {
                    gradleVersion = '${version}'
                }
                
                import de.undercouch.gradle.tasks.download.Download
                
                task downloadFile(type: Download) {
                    src '${testFileSrc}'
                    dest buildDir
                }
            """)
            
            //execute Gradle to create a Gradle wrapper for the test project
            def gradlew = [ new File(rootDir, 'gradlew').getAbsolutePath() ]
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                gradlew = [ 'cmd', '/c', new File(rootDir, 'gradlew.bat').getAbsolutePath() ]
            }
            exec {
                workingDir testProjectDir
                commandLine gradlew + 'wrapper'
            }
            
            //execute test project
            gradlew = [ new File(testProjectDir, 'gradlew').getAbsolutePath() ]
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                gradlew = [ 'cmd', '/c', new File(testProjectDir, 'gradlew.bat').getAbsolutePath() ]
            }
            exec {
                workingDir testProjectDir
                commandLine gradlew + 'downloadFile'
            }
            
            //check test file
            def downloadedTestFile = new File(testProjectDir, 'build/test.txt')
            if (!downloadedTestFile.getText().equals(testStr)) {
                throw new IllegalStateException("Downloaded file does not match test file contents")
            }
            
            project.delete(testProjectDir)
        }
        
        for (vtt in versionsToTest) {
            testGradle(vtt)
        }
    } finally {
        if (testFile != null) {
            testFile.delete()
        }
        server.stop()
    }
}

check.dependsOn integrationTest
